#+STARTUP: indent
- Make a combo, open a drawing program, draw a doodle and save it in
  same dir /sketches and link it from the .org automatically
- Draw with finger on Dynamic
* org-sketch file:org-sketch.el
** DONE Basic (org-sketch-insert)
*** Idea
- org-sketch-insert (name)
- Open org-sketch-tool
  - Open with tool native empty template file name.ext
  - Ideally template.ext file is implicit, not required on disk (maybe
    can be created from elisp itself?)
- Blocks until tool is closed
  - WAIT on shell command... probably the default behaviour?
  - yes it is! ex: shell:gnome-paint blocks until closed
- When tool is closed
  - If file name.ext was saved, it calls tool again to export name.ext into name.png
    - Insert name.png as basic file link at point, unconditionally, with "name"
    - Maybe better prompt name before insertion, but default to
      ./org-sketckes/sketchNN.png if optional param was nil, so that
      we ALWAYS have a custom name for the sketch. and allow
      cancelling
  - If name.ext was not save (so remains empty), delete it
- The main objective is that with a SINGLE command we get the tool
  open and on save we have the sketch image inserted, 0 friction, no
  prompts to query name or any params
- default show inline images should work, nothing else required
- NO overlays, just simple image link
** DONE Make package
*** DONE Standard install/structure
- (provide 'packagename)
- ;;;###autoload
  - Seems to speedup package loading
  - See https://www.gnu.org/software/emacs/manual/html_node/elisp/Autoload.html#Autoload
*** DONE Install in appropriate place
- .emacs.d/lisp and add to load-path
*** DONE Require or load or whatever in init.el
- Require on org hook
- Set keybindings on org hook
*** DONE Customization vars
- sketch dir
- default width/height
- TOOL paths
  - Maybe alist with tool-name and tool-exe or similar
*** DONE gnome-paint TOOL
*** DONE Xournal++ TOOL
**** DONE Create .xopp template
**** DONE Convert .xopp to .png
*** DONE Add GIMP TOOL
*** DONE Add Inkscape TOOL
*** DONE Add Windows support
**** DONE Add MSPaint TOOL
- Mspaint instead of paint.exe
- Add MSP to cond select
**** DONE Modify paths and /dev/null for Windows
- org-sketch-null-output-sink
**** DONE Ensure imagemagick/convert works
- will probably need customized path or similar
**** DONE Modify or adapt commandline programs
- ImageMagick convert needs custom path, but works perfectly
- cp -> copy-file
- rm -> delete-file
**** DONE touch
- make-empty-file does not seem to work, may need extra package?
**** DONE Using \ instead of /
- It would seem from the docs that file-name-as-directory should
  change / into \ but it does NOT, so we need to do it explicitly
- Can use (subst-char-in-string ?/ ?\\ skname_tmp_ext) that
  replaces / with \
*** DONE Customize tool paths
Customize individual org-sketch-tool-command--???, as var, not as func
*** DONE Detect available TOOLs and choose "best", in order
- not sure about this... adding code to detect existing exes is
  cumbersome, just let the user choose/customize it
- Best is the fastest to load, I guess, but allow custom ordering
- Can use (executable-find) to determine if a given tool is available,
  but this would require it to be in the path
- BUT this is cool, if we customize the path/commandline for each
  tool, we could just "executable-find" them and if available, add to
  list of selectable tools?
- Xournal is at
  "~/Escriptori/esquellington/ext/bin/xournalpp-1.0.19-x86_64.AppImage"
*** DONE Error reporting when tools fail
**** DONE Convert tool not available in specified path
- Path may be global, just check it's there and fail if not
**** DONE Selected TOOL not available in specified path?
- Path may be global, just check it's there and fail if not
- Re-check if tool available using executable-find in
  org-sketch-insert, and fail if not there
** TODO Publish?
- Github
- MELPA?
** TODO Advanced (org-sketch-mode?)
*** DONE org-sketch-insert-and-display
- Different func to add org-display-inline-images instantly
*** TODO org-sketch-insert variants
- All can be internally done in a single func with params
**** DONE org-sketch-insert-with-sizes
- Insert with explicit name and sizes (full control)
**** TODO org-sketch-insert-with-source
- Insert both exported and TOOL file and do not delete it
- FOR NOW just leave it there, besides exported one, not linked in
  the .org, but not _TMP anymore, just reopen if exists instead of
  copying template on it
**** TODO org-sketch-insert-with-tool
- Edit with specific (available) program, instead of customized one
*** TODO org-sketch-edit
- Internal method to edit osk link under point, on native file (if
  available), or exported one if not
- How do we discriminate regular image links from osk links?
- How do we handle native files in different formats? MIME-like assoc
  to available drawing tools?
- Maybe we don't need to, once inserted, a link is a link, that's it,
  use standard func on it, nothing fancy. If you want to re-edit
  natively and re-export, do it manually
- Maybe just offer a command that given a link, tries to match the
  native/exported files, opens native using org-file-apps, and on save
  reexports, but keep it minimal.
**** TODO org-file-apps associates files with programs
- External applications for opening ‘file:path’ items in a document
*** TODO Minor mode org-sketch-mode
- minor mode, inspired in org-krita
- More features than standalone function, can have persistent state,
  react to inputs, etc
- Opens tool and allows creating/editing new/existing sketch on
  access, but also displays image as usual org-toggle-inline-images
**** TODO Custom link type [sketch:name]
- If org-sketch-insert is called when on an existing link, we'll
  edit, instead of add it, keep it simple
**** TODO overlays
- toggle each indidivually, etc... display just added by default (customizable)
**** TODO org export support
*** TODO Manage sketches/DB (delete, purge)
- Delete sketch: when link is deleted, image file is deleted too
- Or maybe org-sketch-purge that does thisa utomatically for the
  whole .org file... BUT beware because same /sketches dir may
  contain sketches from different .org files
  - So purgue command would need to open and analyze ALL .org in
    this directory that share the same /sketches dir
  - AND if /sketches has been customized it may be shared by OTHER
    .org in different paths, so just forget it, no purgue, just try
    to delete when delete link by explicitly calling
    org-sketch-delete under point
- Sketch database or directory, etc...
*** TODO Template customization
- Explicity template file, optional
- Template resolution as blank page
- Template background colors/transparency
*** TODO Crop customization
- Enable/disable output crop, maybe
- Add uncropped margin, maybe?
*** TODO TOOL krita
*** TODO TOOL Paint.NET
- Seems popular
*** TODO TOOL MyPaint http://mypaint.org/
- Looks very cool actually, very wacom-oriented though
- Uses PNG or similar, no custom
*** TODO TOOL Kolourpaint
* Xournalapp https://github.com/xournalpp/xournalpp
- Very cool note taking and sketching app, and boots fast (appimage)
- Allows layers, moving stuff and text, best I've seen so far
- Touchscreen painting works but requires reassigning inputs in
  Edit/Preferences/Input (make Touchscreen device be considered as Mouse)
- Not sure if it can be called/integrated easily to export .png and
  quit from emacs itself
  - YES, xournalpp file.xopp -i file.png exports png
  - calling xournalpp file.xopp requires file.xopp to exist, so would
    need to be created first, and not sure it can be empty, so we
    probably need a template file to open/modify/save from
- Ex: [[file:tests/ContactVV.png]]
- Trim PNG whitespace with
  - convert input.png -trim output.png
  - must change background to Plain first, no notebook horizontal
    lines as default
** TODO Scale/Rotate handles are too small for finger use
- Could rebuild from source and make them larger I guess
* Other resource types for org "note-taking"
- The idea of "insert something here that needs to run an external
  program modally" could be generalized to other resources
  - Record voice note
  - Insert screenshot (desktop or window)
  - Insert picture
- This fits pretty well with the idea of using org files as
  interactive notes, even incremental note-taking, where text can be
  added natively, and images/sound can be inserted on the spot from
  Emacs itself, without having to open external programs explicitly,
  adding links, etc...
* Similar Emacs packages
** org-krita https://github.com/lepisma/org-krita
- seems Wip, but is very similar to what I wanted
- plans to support other painting programs
- uses custom org-mode links
- Krita is quite heavyweight and seems pencil-oriented and complex,
  not sure how easy it is to move stuff around, etc, and the UI seems
  complex
** org-notebook https://github.com/Rahi374/org-notebook
- Basically THE SAME IDEA, not sure about implementation or
  customizability though
- Generates file name automatically, incrementally /img/imgN.png
- Creates image and inserts link even if not saved in TOOL, so there's
  no "cancel"
- Supports kolourpaint, mypaint, krita, gimp
- Tried changing mypaint to gimp but it doesn't work
- Seems to pick 1st tool available automatically, using this
  defcustom, where the "cond" just sets the 1st available by default,
  but still allows overwriting it
(defcustom org-notebook-drawing-program (cond
                                         ((executable-find "kolourpaint") "kolourpaint")
                                         ((executable-find "mypaint") "mypaint")
                                         ((executable-find "krita") "krita")
                                         ((executable-find "gimp") "gimp"))
  "Drawing program to be used"
  :type 'string
  :group 'org-notebook)
- No custom commandline per program or support for native to PNG
  conversion though
** org-screenshot https://github.com/dfeich/org-screenshot
[[file:sketches/jjdd.png]]
