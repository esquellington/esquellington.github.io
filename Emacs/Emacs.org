#+STARTUP: indent overview

Emacs hacking and tests

* Build Emacs from source
- Get source from http://git.savannah.gnu.org/cgit/emacs.git
- git clone -b BRANCH git://git.sv.gnu.org/emacs.git
  - BRANCH = master for latest, but sometimes buggy
  - BRANCH = emacs-28 for next release
- ./autoconf
- ./configure
- make bootstrap
- make
* [[file:~/.emacs.d/init.el][init.el]]
* Remapping CAPS_LOCK to CTRL
- setxkbmap -option ctrl:nocaps (OR BETTER -option caps:ctrl_modifier)
- setxkbmap -option (empty options list, to remove ALL previously set options)
- Transient change, add it to file:~/.bashrc to do it on startup
- List of relevant option values (https://gist.github.com/jatcwang/ae3b7019f219b8cdc6798329108c9aee)
  - CTRL
    ctrl:nocaps          Caps Lock as Ctrl
    ctrl:lctrl_meta      Left Ctrl as Meta
    ctrl:swapcaps        Swap Ctrl and Caps Lock
    ctrl:ac_ctrl         At left of 'A'
    ctrl:aa_ctrl         At bottom left
    ctrl:rctrl_ralt      Right Ctrl as Right Alt
    ctrl:menu_rctrl      Menu as Right Ctrl
    ctrl:swap_lalt_lctl  Swap Left Alt key with Left Ctrl key
    ctrl:swap_lwin_lctl  Swap Left Win key with Left Ctrl key
    ctrl:swap_rwin_rctl  Swap Right Win key with Right Ctrl key
    ctrl:swap_lalt_lctl_lwin Left Alt as Ctrl, Left Ctrl as Win, Left Win as Alt
  - CAPS_LOCK
    caps:internal        Caps Lock uses internal capitalization; Shift "pauses" Caps Lock
    caps:internal_nocancel Caps Lock uses internal capitalization; Shift doesn't affect Caps Lock
    caps:shift           Caps Lock acts as Shift with locking; Shift "pauses" Caps Lock
    caps:shift_nocancel  Caps Lock acts as Shift with locking; Shift doesn't affect Caps Lock
    caps:capslock        Caps Lock toggles normal capitalization of alphabetic characters
    caps:shiftlock       Caps Lock toggles ShiftLock (affects all keys)
    caps:swapescape      Swap ESC and Caps Lock
    caps:escape          Make Caps Lock an additional ESC
    caps:backspace       Make Caps Lock an additional Backspace
    caps:super           Make Caps Lock an additional Super
    caps:hyper           Make Caps Lock an additional Hyper
    caps:menu            Make Caps Lock an additional Menu key
    caps:numlock         Make Caps Lock an additional Num Lock
    caps:ctrl_modifier   Caps Lock is also a Ctrl
    caps:none            Caps Lock is disabled
  --> Super and Hyper are the "windows key" sadly, so not useful
- Other remaps are possible, what could we use CAPS_LOCK for in Emacs?
  - I don't think I need CTRL there
  - Maybe ESC, but I rarely use it...
* org-mode stuff: file:advanced_org_features.org
* Literate programming howto/exercise: file:test-avx.org
* Latex in comments file:LatexInComments/LatexInComments.org
* Web file:../web/Web.org
* Avy advanded usage
https://karthinks.com/software/avy-can-do-anything/
* Elisp tutorials
- https://protesilaos.com/emacs/emacs-lisp-elements
* Unicode in Emacs
- http://ergoemacs.org/emacs/emacs_n_unicode.html
- M-x insert character OR C-x 8 RET
  - can be found by name, a bit cumbersome but works (ex NABLA ‚àá)
  - search for MATHEMATICAL xxxx
- M-x describe-char shows info of char under cursor
- Œª ‚àá
  // C++11 UTF-8 string literals are awesome
  printf( "%s\n", u8"Œîx = ‚àáy" );
- Deltas ùõÖ, ùö´
- Partials ùûâ, ‚àÇ, ùúï, ùùè
- DOES it work on Windows?
* Magit HowTo
- User manual: https://magit.vc/manual/magit/
- Visual intro: https://magit.vc/screenshots/
- magit-status (C-x g), and then:
  - tab toggles per-file diff
  - 's' on "unstaged" changes toggles them to "staged"
  - 'c' and then 'c' opens commit buffer for "staged" changes, input commit
    description and then press C-c to perform commit. Files become
    "unmerged"
  - 'P' and then 'p' pushes commits to "master" (remote) branch after
    asking for username/password.
  - 'F' for magit-pull and then 'p' for pushremote (== fetch + merge, simpler)
  - 'f' for magit-fetch and then 'a' for pushremote (gets all branches, but
    does not merge)
  - 'm' for magit-merge, anywhere or on top of specific commit (if done after
    fetch, you can see unpulled remote changes)
  - 'l' for magit-log, and then 'a' or 'b' to see see commit history for all
    references or branches
  - 'R' to Rename a file
* Debugging in Emacs
** GUD
- Builtin... ugly but works
** realgud
- Seems to have more features than GUD
** dap-mode https://www.youtube.com/watch?v=0bilcQVSlbM
- New thing using DAP extensions for VSCode... seems hard to install,
  I'll pass
- WATCH the video, maybe it's simpler than I thought
* Pico8-mode
- Consider custom mode for easy code section narrowing of .p8 files,
  syntax highlight, re-launching game, etc...
* ORG-PAPERS
- Organize ALL papers in an org-based scheme
- All .PDF in the SAME directory, with systematic YEAR_Name.pdf
- Subdir /org holds 1 YEAR_Name.org per paper, with bib details, etc
- Global Papers.org with refs to all papers, sorted by year, and with
  TAGS
- Current /Papers subdirs would be come tags/nested tags, same
  tag-based view would be possible, but could also org per multiple tags
- Maybe there's some workflow/mode that already does this using paper
  .bib files or similar...
- I'd like the .org per paper to write custom notes, there's an
  annotations mode in org for that I think
- This seems the ONLY way to ever add/organize all post-PhD papers the
  same as during-PhD ones... and can be done incrementally
- Maybe could use a database for this, with per-paper
  fields/annotations stored with paper-name as key, and query it from
  org somehow??
** Org-babel + SQL https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-sql.html
** emacsql https://kitchingroup.cheme.cmu.edu/blog/2017/01/03/Find-stuff-in-org-mode-anywhere/
** org-sql, but it's the other way around https://github.com/ndwarshuis/org-sql
* Sketches in org-mode file:OrgSketch/OrgSketch.org
* ORG custom links
- Run commandline for custom:link links
** Simple link abbreviation way:
- See https://orgmode.org/manual/Link-Abbreviations.html#Link-Abbreviations
- Add new linktype with "customize-var org-link-abbrev-alist"
  - Add linktype:linktag and "shell:program " that will be called as
    "program tag"
  - [[sketch:tests/ContactVV.png]]
** Full new hyperlink type way:
- Custom code for link open, export, etc...
- Maybe visualization too? Seems so, there's a ":display" param in
  org-link-parameters so I guess it can be overwritten to do the same
  as inline image viz?
- See https://orgmode.org/manual/Adding-Hyperlink-Types.html#Adding-Hyperlink-Types
* ORG BEAMER presentations
- Tutorial https://orgmode.org/worg/exporters/beamer/tutorial.html
- Refcard: https://github.com/fniessen/refcard-org-beamer
- Export https://orgmode.org/manual/Beamer-Export.html
- Tricks: https://github.com/jgoerzen/public-snippets/blob/master/emacs/emacs-org-beamer/emacs-org-beamer.org
* ORG TREE SLIDES (presentations)
- Howto video (30min) https://www.youtube.com/watch?v=vz9aLmxYJB0
* Quoting functions with #'
- If looks like #'something is the proper way to "quote a function", equivalent
  to 'something if someting is a function, but will fail for non-functions
- See https://www.emacswiki.org/emacs/EmacsSymbolNotation
* DONE fold-this
- Supports nested regions/overlays which is cool
- Pretty cool, but no easy way to fold a C++ scope
- MAYBE add it? seems feasible just find balanced {} and fold-this on
  that region
- Works well with er/expand-region
* TODO Learning Emacs Lisp course
https://systemcrafters.net/learning-emacs-lisp/
* DONE <2024-01-21 dom> UPDATE PACKAGES (Emacs 30 from sources)
* DONE all-the-icons
https://github.com/domtronn/all-the-icons.el
* DONE Neotree vs Treemacs? --> Neotree
- https://github.com/Alexander-Miller/treemacs
- Looks pretty cool!
- Looks more featureful than Neotree (https://github.com/jaypei/emacs-neotree)
- Looks VERY COMPLEX and heavyweight, Neotree is fine, I don't really need all those features
- Overall NT is simpler, just use it
* DONE Use keymap-local-set instead of local-set-key!
- https://www.gnu.org/software/emacs/manual/html_node/emacs/Init-Rebinding.html
- IMPORTANT: For MINOR modes, custom keybindings must NOT USE local-set-key or
  keymap-local-set, because that overrides the MAJOR mode keymap, and therefore
  the keybinding is not automatically cleaned up when the MINOR mode is
  disabled, but the MAJOR mode remains active. For example, for beardbolt.
  ;; Custom keybindings. bb is a MINOR mode, so we must set the
  ;; beardbolt-mode-keymap EXPLICITLY with keymap-set, not the "local"
  ;; keymap with keymap-local-set, it would override the MAJOR mode (C/C++)
  (keymap-set beardbolt-mode-map "C-c C-k" #'beardbolt-compile)
* DONE Project --> this is awesome!
- Builtin, considers files within ancestor .git "project" dir
- See https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Projects
- (project-find-file) C-x p f --> awesome
- (project-find-regexp) C-x p g --> finds all matches in project
- (project-compile) C-x p c  --> compile, but needs Makefile to be in project
  top dir
- (project-switch-to-buffer) C-x p b --> switch to open buffer in project
  (subset of open buffers)
* DONE bury-successful-compilation replacement that is simpler?
Couldn't we just do this in a compilation hook, similar to beardbolt?
(let (w)
  (setq w (get-buffer-window "*compilation*"))
  (when w
    (delete-window w)))
* DONE Emacs Dired
- Lots of useful commands, see https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html
- 'f' Visit file in this window
- 'v' View file in this window, read-only
- 'o' Visit file in other window, and move cursor to it
- 'C-o' Visit file in other window, but keep cursor in Dired window
- '^' Visit parent dir
- 's' Sort files+folders alphabetically (toggle on/off)
- '+' Create directory
- 'C-x C-q' (dired-toggle-read-only)
  - Edit arbitrary file names directly
  - 'C-c C-c' commit changes explicitly
  - 'C-x C-q' toggle off edit mode --> asks to commit if there was any changes
  - THIS IS AWESOME!
** File operations https://www.gnu.org/software/emacs/manual/html_node/emacs/Operating-on-Files.html
* TODO Emacs * GPT https://github.com/karthink/gptel
- Also, this blog post https://nullprogram.com/blog/2024/11/10/
  explains how to run local LLMs using llama.cpp (supported by gptel),
  even on CPU, or shitty GPU, consider trying
- BUT no more free access to ChatGPT API so gptel doesn't work, only
  chat in website does https://chatgpt.com/
** DONE Try with Deepseek! https://github.com/karthink/gptel?tab=readme-ov-file#deepseek
- Ah bugger API usage also requires payment, website chat is free, like ChatGPT

* TODO Flycheck or Flymake?
- Make is the default!?
- eglot only supports Flymake?
* TODO LSP
- eglot or lsp-mode? https://www.mgmarlow.com/words/2022-10-23-eglot/
- Try eglot first!? (builtin mode)
- https://www.youtube.com/watch?v=E-NAM9U5JYE
** TODO eglot
- https://www.gnu.org/software/emacs/manual/html_mono/eglot.html
- Works inside a Project (.git)
- Interesting setup tips to avoid too much interference from LSP https://andreyor.st/posts/2023-09-09-migrating-from-lsp-mode-to-eglot/
  (eglot-ignored-server-capabilities
   '(:hoverProvider
     :documentHighlightProvider
     :documentFormattingProvider
     :documentRangeFormattingProvider
     :documentOnTypeFormattingProvider
     :colorProvider
     :foldingRangeProvider))
** TODO lsp-mode
** TODO MAY interfere with dumb-jump!?
- xref mechanism and keybindings may interfere, not sure
* TODO Emacs + ASM
** Emacs ASM syntax modes
*** asm-mode
- Simple builtin ASM major mode
*** nasm-mode
- Looks nicer! install from MELPA
- Works on objdump -S and gcc -S output
** Emacs disaster
- See https://github.com/jart/disaster
- Uses GCC + objdump
- The idea is pretty good, and works well for simple files
*** DONE Default output is ugly
- customize "Disaster Objdump" like this, looks better
  objdump -d -M intel -Sl --no-show-raw-insn --source-comment -C
*** TODO Fails to compile often even if Makefile exists
- Trouble compiling files with custom includes, because of the way it calls
  make, can be fixed but seems a bit tricky
- The fundamental op is "compile current buffer file", which is ill-defined if
  the target .o location needs to be known.
**** TODO So maybe we could add special rule to Makefile to compile any .cpp to its disaster-requested target?
**** TODO Could we SKIP the Makefile and make call completely and just call gcc like FlyCheck does?
- gcc file.cpp -o file.o should work!
- just needs the right CC args, could be customized
**** TODO I think there are internal funcs to generate compilation commandline, maybe can be replaced?
- HOW DOES FlyCheck know how to build the .cpp in current buffer?
- Couldn't we just use EXACTLY the same method?
***** FlyCheck customizations
'(flycheck-gcc-args
  '("-Wall" "-Werror" "-Wno-unused" "-Wno-unused-result" "-Wno-unknown-pragmas"))
'(flycheck-gcc-include-path
  '("/home/oscar/Escriptori/esquellington/tot" "/home/oscar/Escriptori/esquellington/ext"))
'(flycheck-gcc-language-standard "c++17")
'(flycheck-gcc-warnings nil)
***** Disaster
-I/home/oscar/Escriptori/esquellington/tot -I/home/oscar/Escriptori/esquellington/ext
*** TODO output uses asm-mode by default, nasm-mode would be nicer
- Can be toggled a posteriori, but should be automatic
- I could customize so that asm buffers use nasm-mode instead, not sure if
  that's decided by disaster when creating the *assembly* buffer, I guess so.
*** Potential disaster improvements
**** More flexible compile rules, more params
**** More output style options (ex: asm-mode to be used for *assembly* buffer)
**** Refresh output as C++ changes, keeping asm buffer open (ASM-googles)
**** Windows support??
- See https://stackoverflow.com/questions/1020498/how-to-view-the-assembly-behind-the-code-using-visual-c
- This post is interesting:
    For MSVC you can use the linker.
      link.exe /dump /linenumbers /disasm /out:foo.dis foo.dll
    foo.pdb needs to be available to get symbols
- Can also generate "assembly listing" for any .cpp with interleaved code using
  the option /FAs, see https://learn.microsoft.com/en-us/cpp/build/reference/fa-fa-listing-file?view=msvc-170
  - MAYBE there's a compile-to-assembly action and we can call it from emacs
    using VB as we do with regular Compile?
***** TODO Extend disaster to work on Windows?
**** Could we JUST objdump the EXISTING .o, instead of re-compiling it with custom flags!?
- This is the most useful use-case actually... only requires finding .o and
  running objdump
- Optionally recompile .o if out-of-date... AH but disaster call to make ALREADY
  does that!
- So overall, if we fix call to make, it should all work fine!
** Emacs iasm-mode
- See https://github.com/RAttab/iasm-mode
- Interactive disasm?
- Seems experimental, but close to what I had in mind?
** rmsbolt
- See [[beardbolt]], looks simpler and nicer
- LOOKS AWESOME, almost exactly what I had in mind!
- https://github.com/emacsmirror/rmsbolt or https://gitlab.com/jgkamat/rmsbolt
  - gitlab seems to have more activity, issues, PRs, etc...
- rmsbolt to enable in a C++ file
*** TODO Compilation uses plain g++ or compile_commands.json if exists
- Fails like disaster did
- Should customize includes I guess
*** TODO rmsbolt Code is long and complex... I don't think I can modify or even understand all of it
- Supports many languages I don't care about
*** TODO Does not show *rmsbolt-output* buffer automatically
- creates it, but does not split window and show it
*** TODO Changing code triggers recompilation automatically, and that auto-saves the file!
- This may be a sideffect of the regular "compile" command/customization, but
  it's dangerous if we're just mocking/exploring the effect of temporary changes!
- Can be customized off (Rmsbolt Automatic Recompile)
- beardbolt avoids this
*** DONE Customization can use local vars in C++ itself --> BUT ALSO customize-group, which is better
// Local Variables:
// rmsbolt-command: "gcc -O0"
// rmsbolt-disassemble: nil
// rmsbolt-filter-comment-only: nil
// rmsbolt-demangle: t
// End:
*** TODO Disabling mode is not easy from M-x, req prefix arg
- Just write utility funcs to toggle
- Consider keybindings
*** TODO Does not show inline code/comments?
- But does not "need to" because it navitages C++/ASM in parallel
- Still would be nice to inspect ASM directly without navigating C++ to get
  correspondences through highlighted region
** DONE compiler-explorer
- https://github.com/mkcms/compiler-expl
- For completeness, there's a third option: a local client for the (remote)
  godbolt compiler-explorer. It's a pretty good option for short tests, but less
  viable for files that are part of a larger local project.
- Works pretty well, but no SRC/ASM synchronized navigation
- Not viable for files with local includes, I guess?
** TODO beardbolt
- https://github.com/joaotavora/beardbolt
- Fork or rmsbolt that seems even better for C++, but not that active and not on
  MELPA
- Author is also the author of Eglot, so probably knows what they do
*** DONE Improvements over rmsbolt
- Code is beardbolt is a lot simpler! Looks like a stripped-down version, code
  is similar but shorter
- Does not save buffer on compilation!
- Faster than rmsbolt, according to github page
*** DONE beardbolt-mode
- Toggle on a buffer
- Automatic recompile on changes
- Navigation tracks source/asm buffers in sync
- Overwrites C-c C-c to recompile
*** DONE beardbolt-compile
- Explicit compile
- Navigating source does not track asm (but asm tracks source)
*** DONE Default uses plain gcc or compile_commands.json if exists --> not great, improved in [[CONTRIBUTE]]
- Not enough, but easy to fix using
*** DONE Default Keybindings --> intrusive, improved in [[CONTRIBUTE]]
(define-key map (kbd "C-c C-c") #'bb-compile)
(define-key map (kbd "C-c C-d") #'bb-clear-rainbow-overlays)
*** DONE CUSTOMIZE
**** DONE Ensure *bb-asm* is visible
- See [[Function to set Layout, port idea from compiler-explorer]]
- By default seems hidden, not sure why, maybe bury-successful-compilation?? -->
  YES, incompatible!
- Write keybinding that just does that, on beardbolt-compile open bb-asm and
  split vertically
**** DONE toggle bb-mode in c++-mode
- (local-set-key (kbd "C-c C-a") 'beardbolt-mode)
**** DONE Adding beardbolt-mode-hook does not seem to work?
**** DONE Compilation
- needs same args as Flycheck
- Local vars
  // beardbolt-command: "g++ -std=c++17 -O3 -fno-exceptions -march=native -I/home/oscar/Escriptori/esquellington/tot -I/home/oscar/Escriptori/esquellington/ext"
**** DONE How does the compile_commands.json option work?
*** TODO CONTRIBUTE
- Maybe I could modify + contrib to it?
- Customizations should all be available as local-vars
**** DONE FORK, not Clone, official beardbolt into local /repo
**** DONE [#A] Keybindings for n (next) and p (prev) in ASM buffer
- nicer navigation, like in magit, if it's read-only no point in requiring
  Ctrl+n/p to navigate lines
**** DONE [#A] Less intrusive compilation args
- Adding local vars to .cpp is ugly and intrusive
- Ideally we'd just have some global defaults, and some local overrides for
  stuff that we may want to change per-file when testing
  - Optimization level -O0..3
  - Platform flags
***** DONE [#A] Additional beardbolt-gcc-include-flags custom var
- Easy peasy
***** DONE [#A] Additional beardbolt-gcc-optimization-flags
- Easy to concat
***** DONE [#A] Additional beardbolt-gcc-args
- Could use these to customize -march, etc..., all except optimization level,
  that goes into next one
- For Pla/Tkds would be "-std=c++17 -fno-exceptions -march=native"
- Seems "part of the project"
**** DONE [#A] Keyboard binding C-c C-l to change optimization level in a beardbolt-mode buffer using keybinding
- Add to bb-mode-map (C-c C-l + 0..3)
  - Just "set opt level to 0..3"
- Recompile when changed from keybinding, just call beardbolt-compile automatically
**** DONE [#A] Option to skip all default keybindings in keymap
- Just define them in custom mode hook
- Disable keymap completely for now
**** DONE [#A] Toggle automatic compilation on buffer change on/off
- We want to remain in bb mode but still defer recompilation, even if that
  invalidates rainbow
  - Maybe remove rainbow until recompilation?
- Even in bb mode we could toggle autocompile on /off with keys to avoid
  breaking flow if compile is slow.
- Customizable local var, and interactive func to toggle it, with default keybinding
- Notify in modeline that it's disabled --> cloud icon
***** DONE Change bb--after-change
- Keep after-change callback, but just skip recompilation, and change modeline
  icon to cloud
***** DONE define-minor-mode bb-mode defines modeline string, can we change it later?
- YES, we can :eval the lighter (on buffer change, I think) with this
  :lighter (:eval (if bb-auto-compile-on-change " ‚ö°SRC" " ‚õàSRC"))
**** DONE [#B] Additonal info on ASM buffer modeline
***** DONE Optimization level -O0..3
- Read from corresponding SRC buffer?
***** DONE Arch
***** DONE CAN reeval modeline lighter with :eval, see SRC mode
**** DONE [#B] Docs on ASM instruction under point in ASM buffer --> Just use x86-lookup
- Tracy does this and it's pretty awesome
- Maybe some other mode this this already?
  - Seems orthogonal to bb, and only requires asm-mode or derived
- ElDoc could do this?
- Could just add keybinding to do a browser search on a known website that lists
  ASM instructions
***** DONE x86-lookup https://github.com/skeeto/x86-lookup
- Works, a bit ugly and does not find VXXXX instructions (ex VMOVPS), but finds MOVPS
- Could strip V- automatically I guess
**** DONE [#A] Keyb to hide bb-compilation buffer
- Just hide it by name, must be easy!
- (delete-windows-on buffer-name) --> fails if no window on that buffer
HIDE
(let (w)
  (setq w (get-buffer-window "*bb-compilation*"))
  (when w
    (delete-window w)))
SHOW?
- beardbolt does this (display-buffer asm-buffer '(nil (inhibit-same-window . t)))
**** DONE [#A] Split bb-execute into args+auto
***** DONE display rocket next to bolt/cloud
***** TODO beardbolt-execute can be t/nil or a string
- if t, it expands to "" args
- if nil, it does not exec
- if string-p, it becomes args
- This is super-confusing
***** TODO beardbolt-execute-args: string args
***** TODO beardbolt-auto-excute-after-compile: t/nil
***** DONE toggle with command
**** DONE [#A] HUGE conundrum with local vars! --> forget setq-local, always customize globals
- must read with (buffer-local-value xxxx (current-buffer))
- COMPILE does not use bb-gcc-optimization-flags for some reason now? likely
  it's buffer local but not read as such!?
- it did work when we (setq xxx) globally, but not after (setq-local xxx)
  because we don't get them as local during bb--c/c++-setup
- FFS... I have no idea how to fix it, so for now all commants setq insead of
  setq-local, and assume actual file local vars are the only pure local
- This means that toggling stuff in one buffer toggles it in all buffers that DO
  NOT explicitly set that local var
***** Ok! found way to query local vars (buffer-local-value 'bb-local-var (current-buffer))
**** DONE [#A] ASM -march does not seem to show buffer local vars?
- see test.cpp
- WEIRD C-h v beardbolt-gcc-arch-flags shows right value in SRC, but default in
  ASM
- SO I guess var is buffer-local in SRC buffer BB mode, but not seen by ASM buffer!
- How does it see optimization then? --> AH! I was setting global var, not local!
- So if we set local var, it's not seen
***** TODO Send SRC buffer-local values to ASM so that modeline is correct!
**** DONE [#A] Remove beardbolt-mode hook keybindings on exit        :MID:
- BB beardbolt-mode-hook local-set-key stay after BB mode is exited, which
  interferes with C++ mode if BB redefines some keybindings (ex: hide-compilation)
- BB keymap is correctly cleaned up on exit... so maybe just add keys to keymap?
**** DONE [#B] Option to Narrow to function/region --> not worth it :HARD:
- Simplify focusing on function and its asm on both buffers
- Regular narrowing works on SRC and ASM buffers, but it's not synchronized, we
  could add a "bb-narrow-src-and-asm" function that does that automatically, and
  toggle narrow/widen
- Not sure bb overlays are working correctly when I manually narrow SRC and ASM
- Correspondence is not necessarily compact, especially for inline funcs, it can
  get very messy, so we'd only be able to narrow to a large min/max
  region in ASM at least... this makes it quite useless
- Too hard for very little gain, ignore!
**** DONE [#B] Option to preserve SRC/ASM point after recompilation  :MID:
- It's a bit annoying that recompilation resets ASM point to start of
  file, and requires moving cursor in SRC buffer to re-sync ASM to it
- Ideally we'd just save/restore the point, but ASM buffer will likely
  change so there's no guarantee it'll be good
***** DONE [#A] Find sync-point (SRC/ASM) that is closest to current SRC point after a recompile, and move there in SRC/ASM
- If SRC is on a sync-point, then just refresh ASM to that same point
- Otherwise we'd want to find the closest sync-point BACKWARDS, up to
  the function start, as we'll often iterate on a function body
- Add new func "bb-goto-src-closest-sync-point" or similar
- Call it on recompile, ensure we stay if we're already on a
  sync-point in SRC
- DUH... bb--synch-relation-overlays should in principle be able to do
  this, but code is super-messy... I have no idea of how to find
  closest previous sync-point and sync there
  - Well it's not that bad
***** DONE [#C] Alternative: Try to sync current function by name in SRC/ASM --> Nah no need
  - We should try to restore the "closest point", maybe looking for a
    match of a few lines, and if not found, revert to current function start
  - If we ensure we keep func names in SRC/ASM this should work well
    enough in most cases
***** DONE [#C] Calling bb--synch-relation-overlays at the end of bb--handle-finish-compile works to preserve point IF already at a sync-point
**** TODO [#B] Before/After ASM buffers                             :HARD:
- Keep outputs side by side
- Useful to compre before/after changes
- Diff ASM buffers
**** TODO [#B] Discrete selection of arch+instructionset            :EASY:
- See https://gcc.gnu.org/onlinedocs/gcc/x86-Options.html
- gcc -march=XXXX
  - default to native
  - x86-64 --> generic x64, seems most portable
  - Not sure what other archs make sense
  - haswell
  - broadwell
  - Sets instruction set automatically!
- gcc instruction set
  -msse
  -msse2
  -msse3
  -mssse3
  -msse4
  -msse4a
  -msse4.1
  -msse4.2
  -mavx
  -mavx2
  ...
- Similar to optimizaiton level
- Allow selecting finite list of GCC-available archs/instruction sets?
- What combintions make sense?
  - native (default)
  - x64 + sse4.2 (minimum)
  - x64 + avx2
***** DONE Show in ASM modeline
***** TODO Command to select one of the few predefined combinations?
**** TODO [#C] Prettier mode-line ASM info                           :MID:
- Shorten to avoid clutter, ideally ASM/native/O3 or similar
- Could just strip -mxxx= prefixes or similar?
**** TODO [#C] Higher contrast selection/correspondence highlight    :MID:
- Default is pretty hard to see, I overwrote color and it's a lot clearer
- Ideally we'd find a "complementary hue" or similar automatically from known
  background color that still keeps text visible at the same time
**** TODO [#C] Option to disable rainbows completely                :HARD:
- bb-clear-rainbow-overlays exists, but it justs clears overlays on current
  buffer, does not disable rainbow on successive calls, and breaks sync
  highlight on SRC/ASM, and does not allow enabling them again
- Ideally bb-toggle-rainbow-overlays to enable/disable
- Ah... but bb seems to use overlays to sync regions in SRC/ASM, so we cannot
  disable them completely, but maybe we can make them invisible?
- Alternative mode would highlight current region very clearly, and nothing else
***** TODO bb-current-line-face is the face used for highlight?
- Yes it is, changing background to be bright helps, even if rainbow is not removed
**** TODO [#C] Option to keep inline code/comments?
- objdump can do that, I think
- // beardbolt-preserve-comments: t
  - Does not seem to work!? not sure if that's supposed to keep C++ comments,
    probably not
- But does not "need to" because it navitages C++/ASM in parallel
- Still would be nice to inspect ASM directly without navigating C++ to get
  correspondences through highlighted region
**** TODO [#C] Allow binding to Flycheck/Flymake customization to beardbolt customization --> pretty irrelevant
- Would ensure that if we have FM/FC working on a given project then beardbolt
  works out of the box with same args, which is nice
***** TODO beardbolt-gcc-include-flags = 'flycheck-gcc-include-path
- BUT 'flycheck-gcc-include-path is a list of paths, not a single flags string
***** TODO beardbolt-gcc-args = 'flycheck-gcc-args
**** TODO [#C] Disable bury-successful-compilation to avoid closing the ASM buffer
- Interferes, but leaving compilation buffer open sucks!
- Maybe keybinding to bury it (by name, so it's easy!)
  - bury-buffer?
- Should not be necessary, ideally we can modify bb--handle-finish-compile to
  just remove compilation buffer when it finishes successfully even if it's open
  because it failed last time?
*** TODO [#B] Add '-fopt-info' info annotations on SRC               :MID:
- See https://gcc.gnu.org/onlinedocs/gcc/Developer-Options.html
- could be useful to show opt tips/messages to annotate code, maybe as
  an overlay on code (output contains line/column so should be easy to
  overlay in open buffer)
- GCC generates this info, it's a bit noisy about inlining, but seems useful
- -fopt-info-missed seems useful to find bits that may be improved
**** TODO Show "potential aliasing" info when relevant
- -all shows "consider run-time aliasing test between XXXXX" messages
  that can signal unintended aliasing that induce unnecessary MOVs
**** TODO Show missed optimization when relevant
**** TODO Overall this could be code independent from BB, but seems useful in combination with it
- In particular, -fopt-info-all param would be passed to BB
  commandline to generate output, maybe in a target file, and then we
  could inspect it and add overlays to BB SRC buffer, or any other sRC buffer
*** TODO Use-Cases/Examples
- A few performance hazards that are easily avoided by looking at the ASM
**** DONE See effect of math lib calls
- It's very easy to call "double" prec math funcs by mistake, ASM should make it obvious
- Some comp params might cause unexpected calls to math.h funcs that set errno, or similar
**** TODO See effect of __restrict__ in resulting ASM
***** TODO Minimal Example with mat4x4 maybe?
- loop that calls mul(mat,vec) or similar, noinline, and see effect
**** TODO See (N)RVO application/effect
- Not clear when it's applied, so checking ASM is the only infallible way
- See if it can be disabled with gcc arg, and try with/without
***** TODO Minimal Example
**** TODO See how STL code is inlined
- Potential source of silent inefficiency, good to see what code is generated by
  complex templates
**** TODO See effect of Exceptions
- How much overhead do they add? ASM should make it apparent
