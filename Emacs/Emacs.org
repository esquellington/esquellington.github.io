#+STARTUP: indent

Emacs hacking and tests

* Build Emacs from source
- Get source from http://git.savannah.gnu.org/cgit/emacs.git
- git clone -b BRANCH git://git.sv.gnu.org/emacs.git
  - BRANCH = master for latest, but sometimes buggy
  - BRANCH = emacs-28 for next release
- ./autoconf
- ./configure
- make bootstrap
- make
* [[file:~/.emacs.d/init.el][init.el]]
* Remapping CAPS_LOCK to CTRL
- setxkbmap -option ctrl:nocaps (OR BETTER -option caps:ctrl_modifier)
- setxkbmap -option (empty options list, to remove ALL previously set options)
- Transient change, add it to file:~/.bashrc to do it on startup
- List of relevant option values (https://gist.github.com/jatcwang/ae3b7019f219b8cdc6798329108c9aee)
  - CTRL
    ctrl:nocaps          Caps Lock as Ctrl
    ctrl:lctrl_meta      Left Ctrl as Meta
    ctrl:swapcaps        Swap Ctrl and Caps Lock
    ctrl:ac_ctrl         At left of 'A'
    ctrl:aa_ctrl         At bottom left
    ctrl:rctrl_ralt      Right Ctrl as Right Alt
    ctrl:menu_rctrl      Menu as Right Ctrl
    ctrl:swap_lalt_lctl  Swap Left Alt key with Left Ctrl key
    ctrl:swap_lwin_lctl  Swap Left Win key with Left Ctrl key
    ctrl:swap_rwin_rctl  Swap Right Win key with Right Ctrl key
    ctrl:swap_lalt_lctl_lwin Left Alt as Ctrl, Left Ctrl as Win, Left Win as Alt
  - CAPS_LOCK
    caps:internal        Caps Lock uses internal capitalization; Shift "pauses" Caps Lock
    caps:internal_nocancel Caps Lock uses internal capitalization; Shift doesn't affect Caps Lock
    caps:shift           Caps Lock acts as Shift with locking; Shift "pauses" Caps Lock
    caps:shift_nocancel  Caps Lock acts as Shift with locking; Shift doesn't affect Caps Lock
    caps:capslock        Caps Lock toggles normal capitalization of alphabetic characters
    caps:shiftlock       Caps Lock toggles ShiftLock (affects all keys)
    caps:swapescape      Swap ESC and Caps Lock
    caps:escape          Make Caps Lock an additional ESC
    caps:backspace       Make Caps Lock an additional Backspace
    caps:super           Make Caps Lock an additional Super
    caps:hyper           Make Caps Lock an additional Hyper
    caps:menu            Make Caps Lock an additional Menu key
    caps:numlock         Make Caps Lock an additional Num Lock
    caps:ctrl_modifier   Caps Lock is also a Ctrl
    caps:none            Caps Lock is disabled
  --> Super and Hyper are the "windows key" sadly, so not useful
- Other remaps are possible, what could we use CAPS_LOCK for in Emacs?
  - I don't think I need CTRL there
  - Maybe ESC, but I rarely use it...
* org-mode stuff: file:advanced_org_features.org
* Literary programming howto/exercise: file:test-avx.org
* Preview LaTeX formulas code comments
** DONE Requirements for EASY LaTeX math preview in C/C++ comments
*** Should work like texfrag-region/document, but for whole comments/functions/files
- See texfrag code, looks complex and uses auctex, which DOES NOT WORK
  IN WINDOWS
- It also uses preview for intermediate steps, which seems to be a
  generic way to do this in emacs
*** 0-config, work by default
**** Avoid dependencies, try to invoke latex/dvips directly and display overlay
**** NO need to flag latex blocks, just look for $, $$, \[ and \begin{} pairs like texfrag does
**** Automatic scaling of formulas to font size (should be readable by default)
*** 0-interference
**** KEEP plain text edit of comments working at ALL TIMES
**** if cursor is in a formula, disable the preview while there
** TODO laic (latex-in-comments)
- file:LaTeX/laic.el
*** References
- texfrag-moode
  - Enable C-c C-p C-p for preview-at-point or preview-region
  - Remove with preview-clearout-buffer
  - See file:latex.cpp for inline math in comments
  - DOES NOT WORK
    - Same issue as here https://latex.org/forum/viewtopic.php?t=27378
- See [[https://github.com/mneri/pnglatex][pnglatex]], works very well
  - Could do the same ops from elisp
  - Support math-environment as part of formula text, no point in
    having to specify it explicitly
- See http://mazack.org/unix/tex2png.php, also useful
- This explains how to create overlays and image tooltips
  http://kitchingroup.cheme.cmu.edu/blog/2016/03/21/Displaying-image-overlays-on-image-filenames-in-Emacs/
*** DONE Call latex*dvipng to get formula image .png
- Autogen temp .tex with proper document class and includes
- Generate proper size image
- latex/dvipng/convert -trim also works for any latex "page"
- .tex must have simple structure
- .tex should have \pagestyle{empty} to avoid page number at bottom
  from stopping convert -trim
*** DONE Insert .png image in Emacs buffer
- As overlay??
- Toggle between text/formula
*** DONE Name it --> laic
- laic = latex-in-comments
- love = latex-overlay
- loverlay
- overlaytex
- clover = comments latex overlay
- glasstex? put them on and see formulas?
- greekvision? geek/greek vision
*** DONE Set proper colors
- Set fore/background color to proper values from Emacs theme at 1st
  latex block delimiter
*** DONE Extend to all formulas in a region or buffer
- Use regexp to match all delimiter pairs, and gather points begin,end
- Gen overlay image for each match
- match only in comments, not everywhere?
  - texfrag has texfrag-comments-only
*** DONE Optionally run in comments only
*** TODO Find text in formula delimiters around point
**** DONE \[ \]
**** TODO Other delimiters
- \begin/end equation,eqnarray,align, and non-numbered versions,
  useful but require non-trivial matching of text inside {}
- $ and $$ will be tricky because they're symmetric begin/end
- texfrag probably does this, check code
  - texfrag-next-frag-function
- Regexp to match region?
  - SO it seems regex CANNOT match balanced structs, so \[a\] \[b\]
    are matched as a SINGLE string, instead of 2 groups
  - Thus, we should only match the beginnings \[ and FROM THERE,
    match the first \]
- Probably the best commands would be
  - "convert closest not yet converted"
    - So, search back and if there's a BEGIN closer than an END, then
      search forward for an END
  - "toggle closest"
  - prioritize begin/end region containing cursor, otherwise go forward?
*** TODO Package as a minor mode with keybindings
- keybindings
  - See/toggle closest to point
  - See all
  - Clear all
*** TODO Consider ov package for overlay niceties
*** TODO Consider tooltip instead of overlay
- Less intrusive
- Optional?
*** TODO Syntax-highlight latex blocks in comments
- Highlight subtly even when no overlay has been created, ideally
  subtly different shade of comment color, I think Org does something similar
*** TODO BUGS
**** TODO Foreground color is sometimes wrong
- Background is always correct though
- Could it happen on stuff not in screen only? not sure how to repro it
- If we stick to "in-comments" version, then we could just get the
  color from comment font lock properties
** TODO use [[Unicode in Emacs]] to write nicer comments??
* Unicode in Emacs
- http://ergoemacs.org/emacs/emacs_n_unicode.html
- M-x insert character OR C-x 8 RET
  - can be found by name, a bit cumbersome but works (ex NABLA ∇)
- M-x describe-char shows info of char under cursor
- λ ∇
  // C++11 UTF-8 string literals are awesome
  printf( "%s\n", u8"Δx = ∇y" );
* Magit mode HowTo
- User manual: https://magit.vc/manual/magit/
- Visual intro: https://magit.vc/screenshots/
- magit-status (C-x g), and then:
  - tab toggles per-file diff
  - 's' on "unstaged" changes toggles them to "staged"
  - 'c' and then 'c' opens commit buffer for "staged" changes, input commit
    description and then press C-c to perform commit. Files become
    "unmerged"
  - 'P' and then 'p' pushes commits to "master" (remote) branch after
    asking for username/password.
  - 'F' for magit-pull and then 'p' for pushremote (== fetch + merge, simpler)
  - 'f' for magit-fetch and then 'a' for pushremote (gets all branches, but
    does not merge)
  - 'm' for magit-merge, anywhere or on top of specific commit (if done after
    fetch, you can see unpulled remote changes)
  - 'l' for magit-log, and then 'b' to see see commit history for all branches
  - 'R' to Rename a file
* Debugging in Emacs
** GUD
- Builtin... ugly but works
** realgud
- Seems to have more features than GUD
** dap-mode https://www.youtube.com/watch?v=0bilcQVSlbM
- New thing using DAP extensions for VSCode... seems hard to install,
  I'll pass
- WATCH the video, maybe it's simpler than I thought
* Pico8-mode
- Consider custom mode for easy code section narrowing of .p8 files,
  syntax highlight, re-launching game, etc...
* ORG-PAPERS
- Organize ALL papers in an org-based scheme
- All .PDF in the SAME directory, with systematic YEAR_Name.pdf
- Subdir /org holds 1 YEAR_Name.org per paper, with bib details, etc
- Global Papers.org with refs to all papers, sorted by year, and with
  TAGS
- Current /Papers subdirs would be come tags/nested tags, same
  tag-based view would be possible, but could also org per multiple tags
- Maybe there's some workflow/mode that already does this using paper
  .bib files or similar...
- I'd like the .org per paper to write custom notes, there's an
  annotations mode in org for that I think
- This seems the ONLY way to ever add/organize all post-PhD papers the
  same as during-PhD ones... and can be done incrementally
- Maybe could use a database for this, with per-paper
  fields/annotations stored with paper-name as key, and query it from
  org somehow??
** Org-babel + SQL https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-sql.html
** emacsql https://kitchingroup.cheme.cmu.edu/blog/2017/01/03/Find-stuff-in-org-mode-anywhere/
** org-sql, but it's the other way around https://github.com/ndwarshuis/org-sql
* Sketches in org-mode file:OrgSketch/OrgSketch.org
* ORG custom links
- Run commandline for custom:link links
** Simple link abbreviation way:
- See https://orgmode.org/manual/Link-Abbreviations.html#Link-Abbreviations
- Add new linktype with "customize-var org-link-abbrev-alist"
  - Add linktype:linktag and "shell:program " that will be called as
    "program tag"
  - [[sketch:tests/ContactVV.png]]
** Full new hyperlink type way:
- Custom code for link open, export, etc...
- Maybe visualization too? Seems so, there's a ":display" param in
  org-link-parameters so I guess it can be overwritten to do the same
  as inline image viz?
- See https://orgmode.org/manual/Adding-Hyperlink-Types.html#Adding-Hyperlink-Types
* ORG-mode presentations https://www.youtube.com/watch?v=vz9aLmxYJB0
https://www.youtube.com/watch?v=E-NAM9U5JYE
* LSP mode https://www.youtube.com/watch?v=E-NAM9U5JYE
