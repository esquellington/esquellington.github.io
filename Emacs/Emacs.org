#+STARTUP: indent

WIP: [[rmsbolt-mode]]

Emacs hacking and tests

* Build Emacs from source
- Get source from http://git.savannah.gnu.org/cgit/emacs.git
- git clone -b BRANCH git://git.sv.gnu.org/emacs.git
  - BRANCH = master for latest, but sometimes buggy
  - BRANCH = emacs-28 for next release
- ./autoconf
- ./configure
- make bootstrap
- make
* [[file:~/.emacs.d/init.el][init.el]]
* Remapping CAPS_LOCK to CTRL
- setxkbmap -option ctrl:nocaps (OR BETTER -option caps:ctrl_modifier)
- setxkbmap -option (empty options list, to remove ALL previously set options)
- Transient change, add it to file:~/.bashrc to do it on startup
- List of relevant option values (https://gist.github.com/jatcwang/ae3b7019f219b8cdc6798329108c9aee)
  - CTRL
    ctrl:nocaps          Caps Lock as Ctrl
    ctrl:lctrl_meta      Left Ctrl as Meta
    ctrl:swapcaps        Swap Ctrl and Caps Lock
    ctrl:ac_ctrl         At left of 'A'
    ctrl:aa_ctrl         At bottom left
    ctrl:rctrl_ralt      Right Ctrl as Right Alt
    ctrl:menu_rctrl      Menu as Right Ctrl
    ctrl:swap_lalt_lctl  Swap Left Alt key with Left Ctrl key
    ctrl:swap_lwin_lctl  Swap Left Win key with Left Ctrl key
    ctrl:swap_rwin_rctl  Swap Right Win key with Right Ctrl key
    ctrl:swap_lalt_lctl_lwin Left Alt as Ctrl, Left Ctrl as Win, Left Win as Alt
  - CAPS_LOCK
    caps:internal        Caps Lock uses internal capitalization; Shift "pauses" Caps Lock
    caps:internal_nocancel Caps Lock uses internal capitalization; Shift doesn't affect Caps Lock
    caps:shift           Caps Lock acts as Shift with locking; Shift "pauses" Caps Lock
    caps:shift_nocancel  Caps Lock acts as Shift with locking; Shift doesn't affect Caps Lock
    caps:capslock        Caps Lock toggles normal capitalization of alphabetic characters
    caps:shiftlock       Caps Lock toggles ShiftLock (affects all keys)
    caps:swapescape      Swap ESC and Caps Lock
    caps:escape          Make Caps Lock an additional ESC
    caps:backspace       Make Caps Lock an additional Backspace
    caps:super           Make Caps Lock an additional Super
    caps:hyper           Make Caps Lock an additional Hyper
    caps:menu            Make Caps Lock an additional Menu key
    caps:numlock         Make Caps Lock an additional Num Lock
    caps:ctrl_modifier   Caps Lock is also a Ctrl
    caps:none            Caps Lock is disabled
  --> Super and Hyper are the "windows key" sadly, so not useful
- Other remaps are possible, what could we use CAPS_LOCK for in Emacs?
  - I don't think I need CTRL there
  - Maybe ESC, but I rarely use it...
* org-mode stuff: file:advanced_org_features.org
* Literary programming howto/exercise: file:test-avx.org
* Latex in comments file:LatexInComments/LatexInComments.org
* Avy advanded usage
https://karthinks.com/software/avy-can-do-anything/
* Unicode in Emacs
- http://ergoemacs.org/emacs/emacs_n_unicode.html
- M-x insert character OR C-x 8 RET
  - can be found by name, a bit cumbersome but works (ex NABLA ‚àá)
  - search for MATHEMATICAL xxxx
- M-x describe-char shows info of char under cursor
- Œª ‚àá
  // C++11 UTF-8 string literals are awesome
  printf( "%s\n", u8"Œîx = ‚àáy" );
- Deltas ùõÖ, ùö´
- Partials ùûâ, ‚àÇ, ùúï, ùùè
- DOES it work on Windows?
* Magit HowTo
- User manual: https://magit.vc/manual/magit/
- Visual intro: https://magit.vc/screenshots/
- magit-status (C-x g), and then:
  - tab toggles per-file diff
  - 's' on "unstaged" changes toggles them to "staged"
  - 'c' and then 'c' opens commit buffer for "staged" changes, input commit
    description and then press C-c to perform commit. Files become
    "unmerged"
  - 'P' and then 'p' pushes commits to "master" (remote) branch after
    asking for username/password.
  - 'F' for magit-pull and then 'p' for pushremote (== fetch + merge, simpler)
  - 'f' for magit-fetch and then 'a' for pushremote (gets all branches, but
    does not merge)
  - 'm' for magit-merge, anywhere or on top of specific commit (if done after
    fetch, you can see unpulled remote changes)
  - 'l' for magit-log, and then 'a' or 'b' to see see commit history for all
    references or branches
  - 'R' to Rename a file
* Debugging in Emacs
** GUD
- Builtin... ugly but works
** realgud
- Seems to have more features than GUD
** dap-mode https://www.youtube.com/watch?v=0bilcQVSlbM
- New thing using DAP extensions for VSCode... seems hard to install,
  I'll pass
- WATCH the video, maybe it's simpler than I thought
* Pico8-mode
- Consider custom mode for easy code section narrowing of .p8 files,
  syntax highlight, re-launching game, etc...
* ORG-PAPERS
- Organize ALL papers in an org-based scheme
- All .PDF in the SAME directory, with systematic YEAR_Name.pdf
- Subdir /org holds 1 YEAR_Name.org per paper, with bib details, etc
- Global Papers.org with refs to all papers, sorted by year, and with
  TAGS
- Current /Papers subdirs would be come tags/nested tags, same
  tag-based view would be possible, but could also org per multiple tags
- Maybe there's some workflow/mode that already does this using paper
  .bib files or similar...
- I'd like the .org per paper to write custom notes, there's an
  annotations mode in org for that I think
- This seems the ONLY way to ever add/organize all post-PhD papers the
  same as during-PhD ones... and can be done incrementally
- Maybe could use a database for this, with per-paper
  fields/annotations stored with paper-name as key, and query it from
  org somehow??
** Org-babel + SQL https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-sql.html
** emacsql https://kitchingroup.cheme.cmu.edu/blog/2017/01/03/Find-stuff-in-org-mode-anywhere/
** org-sql, but it's the other way around https://github.com/ndwarshuis/org-sql
* Sketches in org-mode file:OrgSketch/OrgSketch.org
* ORG custom links
- Run commandline for custom:link links
** Simple link abbreviation way:
- See https://orgmode.org/manual/Link-Abbreviations.html#Link-Abbreviations
- Add new linktype with "customize-var org-link-abbrev-alist"
  - Add linktype:linktag and "shell:program " that will be called as
    "program tag"
  - [[sketch:tests/ContactVV.png]]
** Full new hyperlink type way:
- Custom code for link open, export, etc...
- Maybe visualization too? Seems so, there's a ":display" param in
  org-link-parameters so I guess it can be overwritten to do the same
  as inline image viz?
- See https://orgmode.org/manual/Adding-Hyperlink-Types.html#Adding-Hyperlink-Types
* ORG BEAMER presentations
- Tutorial https://orgmode.org/worg/exporters/beamer/tutorial.html
- Refcard: https://github.com/fniessen/refcard-org-beamer
- Export https://orgmode.org/manual/Beamer-Export.html
- Tricks: https://github.com/jgoerzen/public-snippets/blob/master/emacs/emacs-org-beamer/emacs-org-beamer.org
* ORG TREE SLIDES (presentations)
- Howto video (30min) https://www.youtube.com/watch?v=vz9aLmxYJB0
* DONE <2024-01-21 dom> UPDATE PACKAGES (Emacs 30 from sources)
* DONE all-the-icons
https://github.com/domtronn/all-the-icons.el
* DONE Neotree vs Treemacs? --> Neotree
- https://github.com/Alexander-Miller/treemacs
- Looks pretty cool!
- Looks more featureful than Neotree (https://github.com/jaypei/emacs-neotree)
- Looks VERY COMPLEX and heavyweight, Neotree is fine, I don't really need all those features
- Overall NT is simpler, just use it
* TODO Project! --> this is awesome!1
- Builtin, considers files within ancestor .git "project" dir
- See https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Projects
- (project-find-file) C-x p f --> awesome
- (project-find-regexp) C-x p g --> finds all matches in project
- (project-compile) C-x p c  --> compile, but needs Makefile to be in project
  top dir
- (project-switch-to-buffer) C-x p b --> switch to open buffer in project
  (subset of open buffers)
* TODO Flycheck or Flymake?
- Make is the default!?
- eglot only supports Flymake?
* TODO LSP
- eglot or lsp-mode? https://www.mgmarlow.com/words/2022-10-23-eglot/
- Try eglot first!? (builtin mode)
- https://www.youtube.com/watch?v=E-NAM9U5JYE
** TODO eglot
- https://www.gnu.org/software/emacs/manual/html_mono/eglot.html
- Works inside a Project (.git)
- Interesting setup tips to avoid too much interference from LSP https://andreyor.st/posts/2023-09-09-migrating-from-lsp-mode-to-eglot/
  (eglot-ignored-server-capabilities
   '(:hoverProvider
     :documentHighlightProvider
     :documentFormattingProvider
     :documentRangeFormattingProvider
     :documentOnTypeFormattingProvider
     :colorProvider
     :foldingRangeProvider))
** TODO lsp-mode
** TODO MAY interfere with dumb-jump!?
- xref mechanism and keybindings may interfere, not sure
* TODO Emacs + ASM
** Emacs disaster
- See https://github.com/jart/disaster
- Uses GCC + objdump
- The idea is pretty good, and works well for simple files
*** DONE Default output is ugly
- customize "Disaster Objdump" like this, looks better
  objdump -d -M intel -Sl --no-show-raw-insn --source-comment -C
*** TODO Fails to compile often even if Makefile exists
- Trouble compiling files with custom includes, because of the way it calls
  make, can be fixed but seems a bit tricky
- The fundamental op is "compile current buffer file", which is ill-defined if
  the target .o location needs to be known.
**** TODO So maybe we could add special rule to Makefile to compile any .cpp to its disaster-requested target?
**** TODO Could we SKIP the Makefile and make call completely and just call gcc like FlyCheck does?
- gcc file.cpp -o file.o should work!
- just needs the right CC args, could be customized
**** TODO I think there are internal funcs to generate compilation commandline, maybe can be replaced?
- HOW DOES FlyCheck know how to build the .cpp in current buffer?
- Couldn't we just use EXACTLY the same method?
***** FlyCheck customizations
'(flycheck-gcc-args
  '("-Wall" "-Werror" "-Wno-unused" "-Wno-unused-result" "-Wno-unknown-pragmas"))
'(flycheck-gcc-include-path
  '("/home/oscar/Escriptori/esquellington/tot" "/home/oscar/Escriptori/esquellington/ext"))
'(flycheck-gcc-language-standard "c++17")
'(flycheck-gcc-warnings nil)
***** Disaster
-I/home/oscar/Escriptori/esquellington/tot -I/home/oscar/Escriptori/esquellington/ext
*** TODO output uses asm-mode by default, nasm-mode would be nicer
- Can be toggled a posteriori, but should be automatic
- I could customize so that asm buffers use nasm-mode instead, not sure if
  that's decided by disaster when creating the *assembly* buffer, I guess so.
*** Potential disaster improvements
**** More flexible compile rules, more params
**** More output style options (ex: asm-mode to be used for *assembly* buffer)
**** Refresh output as C++ changes, keeping asm buffer open (ASM-googles)
**** Windows support??
- See https://stackoverflow.com/questions/1020498/how-to-view-the-assembly-behind-the-code-using-visual-c
- This post is interesting:
    For MSVC you can use the linker.
      link.exe /dump /linenumbers /disasm /out:foo.dis foo.dll
    foo.pdb needs to be available to get symbols
- Can also generate "assembly listing" for any .cpp with interleaved code using
  the option /FAs, see https://learn.microsoft.com/en-us/cpp/build/reference/fa-fa-listing-file?view=msvc-170
  - MAYBE there's a compile-to-assembly action and we can call it from emacs
    using VB as we do with regular Compile?
***** TODO Extend disaster to work on Windows?
**** Could we JUST objdump the EXISTING .o, instead of re-compiling it with custom flags!?
- This is the most useful use-case actually... only requires finding .o and
  running objdump
- Optionally recompile .o if out-of-date... AH but disaster call to make ALREADY
  does that!
- So overall, if we fix call to make, it should all work fine!
** Emacs iasm-mode
- See https://github.com/RAttab/iasm-mode
- Interactive disasm?
- Seems experimental, but close to what I had in mind?
** rmsbolt-mode
- LOOKS AWESOME, almost exactly what I had in mind!
- https://github.com/emacsmirror/rmsbolt
- rmsbolt to enable in a C++ file
*** TODO Compilation uses plain g++ or compile_commands.json if exists
- Fails like disaster did
- Should customize includes I guess
*** TODO Does not show *rmsbolt-output* buffer automatically
- creates it, but does not split window and show it
*** TODO Changing code triggers recompilation automatically, and that auto-saves the file!
- This may be a sideffect of the regular "compile" command/customization, but
  it's dangerous if we're just mocking/exploring the effect of temporary changes!
- Can be customized off (Rmsbolt Automatic Recompile)
*** DONE Customization can use local vars in C++ itself --> BUT ALSO customize-group, which is better
// Local Variables:
// rmsbolt-command: "gcc -O0"
// rmsbolt-disassemble: nil
// rmsbolt-filter-comment-only: nil
// rmsbolt-demangle: t
// End:
*** TODO Does not show inline code/comments?
- But does not "need to" because it navitages C++/ASM in parallel
- Still would be nice to inspect ASM directly without navigating C++ to get
  correspondences through highlighted region
*** TODO Disabling mode is not easy from M-x, req prefix arg
- Just write utility funcs to toggle
- Consider keybindings
** Emacs ASM syntax modes
*** asm-mode
- Simple builtin ASM major mode
*** nasm-mode
- Looks nicer! install from MELPA
- Works on objdump -S and gcc -S output
